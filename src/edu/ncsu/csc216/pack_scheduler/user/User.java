package edu.ncsu.csc216.pack_scheduler.user;

/**
 * A class representing a User for PackScheduler.
 * A user has a full name, an ID, an email address, and password. 
 * Users are able to create and modify schedules using PackScheduler.
 * @author Jeremy Ignatowitz
 * @author Gage Fringer
 * @author Ethan Taylor
 */
public abstract class User {

	/** User's first name */
    private String firstName;
    /** User's last name */
    private String lastName;
    /** User's id */
    private String id;
    /** User's email */
    private String email;
    /** User's password */
    private String password;

    /**
     * Constructs a User object, using the given first and last names, ID, email address, and password.
     * This calls the relevant setter methods, to ensure proper encapsulation.
     * @param firstName user's first name
     * @param lastName user's last name
     * @param id user's Unity ID
     * @param email user's email address
     * @param password user's password, preferably hashed
     */
    public User(String firstName, String lastName, String id, String email, String password){
        setFirstName(firstName);
        setLastName(lastName);
        setId(id);
        setEmail(email);
        setPassword(password);
    }

    /**
     * Gets the student's first name.
     * @return student's first name
     */
    public String getFirstName() {
    	return firstName;
    }

    /**
     * Sets the student's first name to the entered string.
     * @param firstName student's first name
     * @throws IllegalArgumentException when the string is null or empty
     */
    public void setFirstName(String firstName) {
    	if(firstName == null || firstName.length() == 0) {
    		throw new IllegalArgumentException("Invalid first name");
    	}
    	else this.firstName = firstName;
    }

    /**
     * Get the student's last name.
     * @return student's last name
     */
    public String getLastName() {
    	return lastName;
    }

    /**
     * Set the student's last name to the entered string.
     * @param lastName student's last name
     * @throws IllegalArgumentException when the string is null or empty
     */
    public void setLastName(String lastName) {
    	if(lastName == null || lastName.length() == 0) {
    		throw new IllegalArgumentException("Invalid last name");
    	}
    	else this.lastName = lastName;
    }

    /**
     * Gets the student's ID.
     * @return student's ID
     */
    public String getId() {
    	return id;
    }

    /**
     * Sets the user's ID, setting it to the one passed in.
     * Method is private because IDs are unique, and shouldn't be changed by clients after they're set
     * @param id the new id for the user
     * @throws IllegalArgumentException thrown if id is invalid
     */
    private void setId(String id) {
    	if(id == null || id.length() == 0) {
    		throw new IllegalArgumentException("Invalid id");
    	}
    	else this.id = id;
    }

    /** 
     * Gets the student's email address.
     * @return student's email address
     */
    public String getEmail() {
    	return email;
    }

    /**
     * Set the student's email address to the entered string.
     * @param email student's email address
     * @throws IllegalArgumentException if the string isn't a valid email (empty, null, no '@', no '.', last '.' before '@')
     */
    public void setEmail(String email) {
    	if(email == null || email.length() == 0 || !email.contains("@") || !email.contains(".") ||
    			email.lastIndexOf(".") < email.indexOf("@")) {
    		throw new IllegalArgumentException("Invalid email");
    	}
    	else this.email = email;
    }

    /**
     * Get the student's hashed password.
     * @return student's hashed password
     */
    public String getPassword() {
    	return password;
    }

    /** 
     * Set the student's password to the entered string
     * @param password student's password, already hashed
     * @throws IllegalArgumentException if password is empty or null
     */
    public void setPassword(String password) {
    	if(password == null || password.length() == 0) {
    		throw new IllegalArgumentException("Invalid password");
    	}
    	this.password = password;
    }

    /**
     * Generates a hash code for an object of type User.
     * A number is multiplied by a prime number, then added to a new hash code generated by
     * its parameters.
     * @return the hash code for the User object
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((email == null) ? 0 : email.hashCode());
        result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
        result = prime * result + ((password == null) ? 0 : password.hashCode());
        return result;
    }

    /**
     * Tells whether this User object is equal to an object that's passed in.
     * Two Users are equal if both objects are Users, and all their parameters have the same value.
     * @return true if both objects are equal users, otherwise false
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        
        if (!email.equals(other.email))
            return false;
        if (!firstName.equals(other.firstName))
            return false;
        if (!id.equals(other.id))
            return false;
        if (!lastName.equals(other.lastName))
            return false;
        if (!password.equals(other.password))
            return false;
        return true;
    }

}